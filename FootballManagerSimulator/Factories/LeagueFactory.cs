using FootballManagerSimulator.Helpers;
using FootballManagerSimulator.Interfaces;
using FootballManagerSimulator.Structures;
using Microsoft.Extensions.Options;

namespace FootballManagerSimulator.Factories;

public class LeagueFactory(
    IClubHelper clubHelper,
    IOptions<Settings> settings) : ICompetitionFactory
{
    private readonly Settings Settings = settings.Value;

    public string Type => "League";

    public class RandomFixture
    {
        public int WeekNumber { get; set; }
        public DateOnly Date { get; set; }
    }

    //Generated by Chat GPT
    private List<Fixture> GenerateNextRoundOfFixtures(List<Club> clubs)
    {
        var output = new List<Fixture>();

        var numRounds = clubs.Count() - 1;
        var halfSize = clubs.Count() / 2;

        var clubIndices = new List<Club>(clubs);

        clubIndices.RemoveAt(0);

        var clubIdxSize = clubIndices.Count;

        var date = Settings.General.StartDateAsDate.AddDays(2);

        var randomHelpers = new List<RandomFixture>();
        for (int i = 1; i <= numRounds * 2; i++)
        {
            randomHelpers.Add(new RandomFixture
            {
                WeekNumber = i,
                Date = date
            });
            date = date.AddDays(7);
        }
        randomHelpers = randomHelpers.OrderBy(p => RandomNumberHelper.Next()).ToList();

        for (var round = 0; round < numRounds; round++)
        {
            var clubIdx = round % clubIdxSize;

            var randomHelper = randomHelpers.First();
            randomHelpers.Remove(randomHelper);

            output.Add(new Fixture
            {
                HomeClub = clubHelper.GetClubById(clubs.ElementAt(0).Id),
                AwayClub = clubHelper.GetClubById(clubIndices[clubIdx].Id),
                Round = randomHelper.WeekNumber,
                Date = randomHelper.Date
            });

            for (int idx = 1; idx < halfSize; idx++)
            {
                var firstClubIdx = (round + idx) % clubIdxSize;
                var secondClubIdx = (round + clubIdxSize - idx) % clubIdxSize;

                output.Add(new Fixture
                {
                    HomeClub = clubHelper.GetClubById(clubIndices[firstClubIdx].Id),
                    AwayClub = clubHelper.GetClubById(clubIndices[secondClubIdx].Id),
                    Round = randomHelper.WeekNumber,
                    Date = randomHelper.Date
                });
            }

            date = date.AddDays(7);
        }

        for (var round = 0; round < numRounds; round++)
        {
            var randomHelper = randomHelpers.First();
            randomHelpers.Remove(randomHelper);

            var clubIdx = round % clubIdxSize;

            output.Add(new Fixture
            {
                HomeClub = clubHelper.GetClubById(clubIndices[clubIdx].Id),
                AwayClub = clubHelper.GetClubById(clubs.ElementAt(0).Id),
                Round = randomHelper.WeekNumber,
                Date = randomHelper.Date
            });

            for (var idx = 1; idx < halfSize; idx++)
            {
                var firstClubIdx = (round + idx) % clubIdxSize;
                var secondClubIdx = (round + clubIdxSize - idx) % clubIdxSize;

                output.Add(new Fixture
                {
                    HomeClub = clubHelper.GetClubById(clubIndices[secondClubIdx].Id),
                    AwayClub = clubHelper.GetClubById(clubIndices[firstClubIdx].Id),
                    Round = randomHelper.WeekNumber,
                    Date = randomHelper.Date
                });
            }

            date = date.AddDays(7);
        }

        return output.OrderBy(p => p.Round).ThenBy(p => p.HomeClub.Name).ToList();
    }

    public ICompetition CreateCompetition(Settings.CompetitionModel competition)
    {
        var clubs = Settings.Clubs
            .Where(p => p.LeagueId == competition.Id)
            .Select(p => new Club
            {
                Id = p.Id,
                Name = p.Name
            });

        if (clubs == null || !clubs.Any())
            throw new Exception($"Unable to get clubs by leagueResourceId {competition.Id}");

        var league = new League()
        {
            Id = competition.Id,
            Name = competition.Name,
            Rank = competition.Rank,
            Clubs = clubs.ToList(),
            Fixtures = GenerateNextRoundOfFixtures(clubs.ToList())
        };
        return league;
    }
}
