using FootballManagerSimulator.Interfaces;
using FootballManagerSimulator.Structures;
using Newtonsoft.Json.Linq;

namespace FootballManagerSimulator.Factories;

public class LeagueFactory : ICompetitionFactory
{
    public string CompetitionType => "League";

    private readonly IUtils Utils;

    public LeagueFactory(IUtils utils)
    {
        Utils = utils;
    }

    public ICompetition CreateCompetition(Competition competition)
    {
        var clubs = Utils.GetResource<IEnumerable<Club>>("teams.json").Where(p => p.CompetitionID == competition.ID);
        var league = new League()
        {
            ID = competition.ID,
            Name = competition.Name,
            CompetitionType = CompetitionType,
            Clubs = clubs
        };
        league.Fixtures = GenerateNextRoundOfFixtures(clubs, league);
        return league;
    }

    public ICompetition Deserialise(JObject data)
    {
        var serialisableCompetitionModel = data.ToObject<SerialisableCompetitionModel>();

        var league = new League()
        {
            ID = serialisableCompetitionModel.ID,
            CompetitionType = CompetitionType,
            Clubs = Utils.GetResource<IEnumerable<Club>>("teams.json").Where(p => p.CompetitionID == serialisableCompetitionModel.ID),
            Name = serialisableCompetitionModel.Name
        };
        league.Fixtures = serialisableCompetitionModel.Fixtures.Select(p => new Fixture
        {
            AwayClub = Utils.GetClub(p.AwayClubId),
            WeekNumber = p.WeekNumber,
            Concluded = p.Concluded,
            Date = p.Date,
            ID = p.ID,
            GoalsAway = p.GoalsAway,
            GoalsHome = p.GoalsHome,
            HomeClub = Utils.GetClub(p.HomeClubId),
            Competition = league
        }).ToList();
        return league;
    }

    //Generated by Chat GPT
    public IEnumerable<Fixture> GenerateNextRoundOfFixtures(IEnumerable<Club> clubs, League league)
    {
        var output = new List<Fixture>();

        var numRounds = clubs.Count() - 1;
        var halfSize = clubs.Count() / 2;

        var clubIndices = new List<Club>(clubs);

        clubIndices.RemoveAt(0);

        var clubIdxSize = clubIndices.Count;

        var date = new DateOnly(2022, 07, 02);

        for (var round = 0; round < numRounds; round++)
        {
            var clubIdx = round % clubIdxSize;

            output.Add(new Fixture
            {
                HomeClub = Utils.GetClub(clubs.ElementAt(0).ID),
                AwayClub = Utils.GetClub(clubIndices[clubIdx].ID),
                WeekNumber = round + 1,
                Date = date,
                Competition = league
            });

            for (int idx = 1; idx < halfSize; idx++)
            {
                int firstClubIdx = (round + idx) % clubIdxSize;
                int secondClubIdx = (round + clubIdxSize - idx) % clubIdxSize;

                output.Add(new Fixture
                {
                    HomeClub = Utils.GetClub(clubIndices[firstClubIdx].ID),
                    AwayClub = Utils.GetClub(clubIndices[secondClubIdx].ID),
                    WeekNumber = round + 1,
                    Date = date,
                    Competition = league
                });
            }

            date = date.AddDays(7);
        }

        for (var round = 0; round < numRounds; round++)
        {
            var clubIdx = round % clubIdxSize;

            output.Add(new Fixture
            {
                HomeClub = Utils.GetClub(clubIndices[clubIdx].ID),
                AwayClub = Utils.GetClub(clubs.ElementAt(0).ID),
                WeekNumber = numRounds + round + 1,
                Date = date,
                Competition = league
            });

            for (var idx = 1; idx < halfSize; idx++)
            {
                var firstClubIdx = (round + idx) % clubIdxSize;
                var secondClubIdx = (round + clubIdxSize - idx) % clubIdxSize;

                output.Add(new Fixture
                {
                    HomeClub = Utils.GetClub(clubIndices[secondClubIdx].ID),
                    AwayClub = Utils.GetClub(clubIndices[firstClubIdx].ID),
                    WeekNumber = numRounds + round + 1,
                    Date = date,
                    Competition = league
                });
            }
        }

        return output;
    }
}
